<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dry.demo.mapper.UmsAdminAndRoleMapper">
	
	<resultMap id="BaseResultMap" type="com.dry.demo.mbg.model.UmsPermission">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="pid" jdbcType="BIGINT" property="pid" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="value" jdbcType="VARCHAR" property="value" />
		<result column="icon" jdbcType="VARCHAR" property="icon" />
		<result column="type" jdbcType="INTEGER" property="type" />
		<result column="uri" jdbcType="VARCHAR" property="uri" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="sort" jdbcType="INTEGER" property="sort" />
	</resultMap>
	
	<select id="getPermissionList" resultMap="BaseResultMap">
		select p.*
		from ums_admin_role_relation `arr`
		    left join ums_role `r` on arr.role_id = r.id
			left join ums_role_permission_relation `rpr` on rpr.role_id = r.id
			left join ums_permission `p` on p.id = rpr.permission_id
		where
			arr.admin_id = #{adminId}
			and p.id is not null
			and p.id not in (
				select p.id
				from ums_admin_permission_relation `apr`
			    	left join ums_permission `p` on apr.permission_id = p.id
			    where
			        apr.admin_id = #{adminId}
			    	and apr.type = -1
			)
		union
			select p.*
			from ums_admin_permission_relation `apr`
				left join ums_permission `p` on apr.permission_id = p.id
			where
				apr.type = 1
				and apr.admin_id = #{adminId}
	</select>
</mapper>